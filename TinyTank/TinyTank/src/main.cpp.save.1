#include <wiringPi.h>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <wiicpp.h>
#include <string.h>

using namespace std;

CWii wii;
vector<CWiimote> vWiimotes;
static const string HEADER = "\nTinyTank.v1:";

CWiimote& WiimoteSynAck(){

//Wiimote connection process--------------------------------------------------

	vWiimotes = wii.FindAndConnect(1);
	while(!vWiimotes.size()){
		printf("%sAttempting to connect to wiimote...", HEADER.c_str());
		digitalWrite(0, HIGH); 
		delay(200);
		digitalWrite(0, LOW);
		delay(200);
	}
//Wiimote acknowledgement-----------------------------------------------------
	digitalWrite(0, HIGH);
	CWiimote& wiimote = vWiimotes[0];
	wiimote.SetLEDs(CWiimote::LED_1);
	wiimote.ToggleRumble();
	delay(100);
	wiimote.ToggleRumble();

	printf("%s--- CONTROLLER ID: %s ", HEADER.c_str(), wiimote.GetID());
	printf("%sWiimote battery: %f%%", HEADER.c_str(), wiimote.GetBatteryLevel());


	return wiimote;
}

bool TeleopSpin(CWiimote &wm){

	for(;;){
		switch(wiimote.GetEvent())


	}
}



void HandleInput(CWiimote &wm){



}




int main(){
//wiringPi setup--------------------------------------------------------------
	wiringPiSetup();
	pinMode(0, OUTPUT);
		//Connection LED

	pinMode(1, OUTPUT);
		//Motor 1, pole 1
	pinMode(2, OUTPUT);
		//Motor 1, pole 2

	pinMode(3, OUTPUT);
		//Motor 2, pole 1
	pinMode(4, OUTPUT);
		//Motor 2, pole 2

//Wiimote SynAck--------------------------------------------------------------


	CWiimote& wiimote = WiimoteSynAck();



//Wiimote event loop---------------------------------------------------------

	for(;;){
			TeleopSpin(wiimote);
	}

/*
	for(;;){
		if(wiimote.Poll(){
			{
				case CWiimote::EVENT_EVENT:
					teleop(wiimote);
					break;
				case CWiimote::EVENT_STATUS:
					HandleStatus(wiimote);
					break;
				case CWiimote::EVENT_DISCONNECT:
				case CWiimote::EVENT_UNEXPECTED_DISCONNECT:
					HandleDisconnect(wiimote);
				reloadWiimotes = 1;
				break;
			}
		}
	}
*/


	return 0;
}
